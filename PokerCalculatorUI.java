/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.pokercalculator;
import java.io.*;
import java.util.*;

/**
 *
 * @author natew
 */
public class PokerCalculatorUI extends javax.swing.JFrame {

    /**
     * Creates new form PokerCalculatorUI
     */
    public PokerCalculatorUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField6 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("P1 Card 1");

        jLabel2.setText("P1 Card 2");

        jLabel3.setText("P2 Card 1");

        jLabel4.setText("P2 Card 2");

        jButton1.setText("Calculate PreFlop Odds");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField5.setText("result.");

        jLabel5.setText("Poker Odds Calculator Version 2.0 by David Eyal de2425@columbia.edu");

        jLabel6.setText("Enter Card Rank (Two, Three ... King, Ace) ");

        jLabel7.setText("Then a space, then Card Suit (Hearts, Diamonds etc.)");

        jLabel8.setText("Example: Ace Hearts or Six Spades");

        jLabel9.setText("Flop Card One");

        jLabel10.setText("Optionally Include 3 Flop Card and/or a Turn Card");

        jButton3.setText("Calculate Flop Odds");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Calculate Turn Odds");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jLabel11.setText("Flop Card Two");

        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        jLabel12.setText("Flop Card Three");

        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jLabel13.setText("Turn Card");

        jTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField8)
                                            .addComponent(jTextField9)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(jTextField7)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField5)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel10))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addComponent(jButton2))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel10)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Map<String, Card> map = new HashMap<String, Card>();
        try{
            map = createMap(map);
        }
        catch (IOException e){
            System.exit(1);
        }
        String s = (String) jTextField1.getText();
        Card p11 = map.get(s);
        map.remove(s);
        s = (String) jTextField2.getText();
        Card p12 = map.get(s);
        map.remove(s);
        s = (String) jTextField3.getText();
        Card p21 = map.get(s);
        map.remove(s);
        s = (String) jTextField4.getText();
        Card p22 = map.get(s);
        map.remove(s);
        jTextField5.setText("Running One Million Simulations");
        float prob = 0;
        for(int i = 0; i< 1000000; i++){
            prob += calcPreflop(p11,p12,p21,p22,map);
        }
        prob = prob/1000000;
        jTextField5.setText("Probability of Player One Victory " + prob);
    }//GEN-LAST:event_jButton1ActionPerformed
    public static float calcPreflop(Card p11, Card p12, Card p21, Card p22, Map<String, Card> map){
        Card[] runout = new Card[5];
        Random generator = new Random();
        Object[] values = map.keySet().toArray();
        for(int i = 0; i<5;i++){
            runout[i] = map.get((String) values[generator.nextInt(values.length)]);
        }
        float p1 = getStrength(getStrength(p11,p12,runout));
        float p2 = getStrength(getStrength(p21,p22,runout));
        if (p1 < p2){
            return 1;
        }
        else if (p2<p1){
            return 0;
        }
        else{
            if(isFull(getStrength(p11,p12,runout)) > 0){
                if(getStrength(p11,p12,runout)[4].getVal() > getStrength(p21,p22,runout)[4].getVal() || getStrength(p11,p12,runout)[1].getVal() > getStrength(p21,p22,runout)[1].getVal()){
                    return 1;
                }
                else return 0;
            }
            if(isTwoPair(getStrength(p11,p12,runout))>0){
                if(getStrength(p11,p12,runout)[4].getVal() > getStrength(p21,p22,runout)[4].getVal() || getStrength(p11,p12,runout)[1].getVal() > getStrength(p21,p22,runout)[1].getVal()){
                    return 1;
                }
                else return 0;
            }
            return 0.5F;
        }
    }
    public static Map<String, Card> createMap(Map<String, Card> map) throws IOException {
        BufferedReader dictionary = new BufferedReader(new FileReader("card.txt"));
        while(dictionary.ready()){
            String x = dictionary.readLine();
            int y = Integer.parseInt((dictionary.readLine()));
            int z = Integer.parseInt((dictionary.readLine()));
            Card n = new Card(z,y);
            map.put(x,n);
        }
        return map;
    }
    public static Card[] getStrength(Card one, Card two, Card[] runout){
        Card[] total = {one,two,runout[0],runout[1],runout[2],runout[3],runout[4]};
        ArrayList<Card[]> combinations = new ArrayList<Card[]>();
        int len = 5;
        int[] indices = new int[len];
        if(len<=total.length) {
            for (int i = 0; (indices[i] = i) < len - 1; i++);
            combinations.add(kSubset(total, indices));
            while (true) {
                int i;
                for (i = len - 1; i >= 0 && indices[i] == total.length - len + i; i--) ;
                if (i < 0) {
                    break;
                }
                indices[i]++;
                for(++i;i<len;i++){
                    indices[i] = indices[i-1] + 1;
                }
                combinations.add(kSubset(total,indices));
            }
        }
        Card[] hand = new Card[5];
        float maxStrength = 9;
        for(int i = 0; i<combinations.size();i++){
            if(maxStrength > getStrength(combinations.get(i))){
                hand = combinations.get(i);
                maxStrength = getStrength(combinations.get(i));
            }
        }
        return hand;
    }
    public static Card[] kSubset(Card[] total, int[] indices){
        Card[] result = new Card[indices.length];
        for (int i = 0; i<indices.length;i++){
            result[i] = total[indices[i]];
        }
        return result;
    }
    public static float getStrength(Card[] hand){
        hand = insertionSort(hand);
        if(isStraightFlush(hand)>0){
            return isStraightFlush(hand);
        }
        if(isQuads(hand) > 0){
            return isQuads(hand);
        }
        if(isFull(hand)>0){
            return isFull(hand);
        }
        if(isFlush(hand) > 0){
            return isFlush(hand);
        }
        if(isStraight(hand) > 0){
            return isStraight(hand);
        }
        if(isTrips(hand)>0){
            return isTrips(hand);
        }
        if(isTwoPair(hand)>0){
            return isTwoPair(hand);
        }
        if(isPair(hand)>0){
            return isPair(hand);
        }
        else return 8 + 1/hand[4].getVal();
    }
    //Sorts the card for easier classification
    public static Card[] insertionSort(Card[] hand){
        for (int i = 1; i<hand.length;i++){
            int k;
            Card current = hand[i];
            for (k = i-1;k>=0 && hand[k].getVal() > current.getVal(); k--){
                hand[k+1] = hand[k];
                }
            hand[k+1] = current;}
        return hand;}
    /*
    Methods to check the classification of the hand
    The base is an integer representing a classification, where lower is better
    Then we add 1 divided by the strongest determining card
     */
    public static float isStraightFlush(Card[] hand){
        if( isFlush(hand) > 0 && isStraight(hand) > 0){
            return 0 + 1/hand[4].getVal();
        }
        return 0;
    }
    public static float isQuads(Card[] hand){
        if (hand[1].getVal() == hand[2].getVal() && hand[2].getVal() == hand[3].getVal() && hand[3].getVal() == hand[4].getVal()){
            return 1 + 1/hand[1].getVal();
        }
        if (hand[0].getVal() == hand[1].getVal() && hand[1].getVal() == hand[2].getVal() && hand[2].getVal() == hand[3].getVal()){
            return 1 + 1/hand[1].getVal();
        }
        return 0;
    }
    public static float isFull(Card[] hand){
        if(hand[0].getVal() == hand[1].getVal() && hand[1].getVal() == hand[2].getVal() && hand[3].getVal() == hand[4].getVal()){
            return 2+1/hand[0].getVal();
        }
        if(hand[0].getVal() == hand[1].getVal() && hand[2].getVal() == hand[3].getVal() && hand[3].getVal() == hand[4].getVal()){
            return 2+1/hand[4].getVal();
        }
        return 0;
    }
    public static float isFlush(Card[] hand){
        if( hand[0].getSuit() == hand[1].getSuit() && hand[1].getSuit() == hand[2].getSuit() && hand[2].getSuit() == hand[3].getSuit() && hand[3].getSuit() == hand[4].getSuit()){
            return 3+1/hand[4].getVal();
        }
        return 0;
    }
    public static float isStraight(Card[] hand){
        if (hand[0].getVal() == 2 && hand[1].getVal() == 3 && hand[2].getVal() == 4 && hand[3].getVal() == 5 && hand[4].getVal() == 14){
            return (float) (4 + 0.2);
        }
        for (int i = 0; i<4; i++){
            if (hand[i].getVal() != hand[i+1].getVal() - 1){
                return 0;
            }
        }
        return 4 + 1/hand[4].getVal();
    }
    public static float isTrips(Card[] hand){
        if(hand[0].getVal() == hand[1].getVal() && hand[1].getVal() == hand[2].getVal()){
            return 5+1/hand[1].getVal();
        }
        if(hand[1].getVal() == hand[2].getVal() && hand[2].getVal() == hand[3].getVal()){
            return 5+1/hand[1].getVal();
        }
        if(hand[2].getVal() == hand[3].getVal() && hand[3].getVal() == hand[4].getVal()){
            return 5+1/hand[2].getVal();
        }
        return 0;
    }
    public static float isTwoPair(Card[] hand){
        if(hand[0].getVal() == hand[1].getVal() && hand[2].getVal() == hand[3].getVal()){
            return 6+1/hand[2].getVal();
        }
        if(hand[0].getVal() == hand[1].getVal() && hand[3].getVal() == hand[4].getVal()){
            return 6 + 1/hand[3].getVal();
        }
        if( hand[1].getVal() == hand[2].getVal() && hand[3].getVal() == hand[4].getVal()){
            return 6 + 1/hand[4].getVal();
        }
        return 0;
    }
    public static float isPair(Card[] hand){
        if(hand[0].getVal() == hand[1].getVal()){
            return 7 + 1/hand[0].getVal();
        }
        if(hand[1].getVal() == hand[2].getVal()){
            return 7 + 1/hand[2].getVal();
        }
        if(hand[2].getVal() == hand[3].getVal()){
            return 7 + 1/hand[3].getVal();
        }
        if(hand[3].getVal() == hand[4].getVal()){
            return 7 + 1/hand[3].getVal();
        }
        return 0;
    }
    public static float calcFlop(Card p11, Card p12, Card p21, Card p22, Map<String, Card> map,Card[] runout){
        Random generator = new Random();
        Object[] values = map.keySet().toArray();
        for(int i = 3; i<5;i++){
            runout[i] = map.get((String) values[generator.nextInt(values.length)]);
        }
        float p1 = getStrength(getStrength(p11,p12,runout));
        float p2 = getStrength(getStrength(p21,p22,runout));
        if (p1 < p2){
            return 1;
        }
        else if (p2<p1){
            return 0;
        }
        else{
            if(isFull(getStrength(p11,p12,runout)) > 0){
                if(getStrength(p11,p12,runout)[4].getVal() > getStrength(p21,p22,runout)[4].getVal() || getStrength(p11,p12,runout)[1].getVal() > getStrength(p21,p22,runout)[1].getVal()){
                    return 1;
                }
                else return 0;
            }
            if(isTwoPair(getStrength(p11,p12,runout))>0){
                if(getStrength(p11,p12,runout)[4].getVal() > getStrength(p21,p22,runout)[4].getVal() || getStrength(p11,p12,runout)[1].getVal() > getStrength(p21,p22,runout)[1].getVal()){
                    return 1;
                }
                else return 0;
            }
            return 0.5F;
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Map<String, Card> map = new HashMap<String, Card>();
        try{
            map = createMap(map);
        }
        catch (IOException e){
            System.exit(1);
        }
        String s = (String) jTextField1.getText();
        Card p11 = map.get(s);
        map.remove(s);
        s = (String) jTextField2.getText();
        Card p12 = map.get(s);
        map.remove(s);
        s = (String) jTextField3.getText();
        Card p21 = map.get(s);
        map.remove(s);
        s = (String) jTextField4.getText();
        Card p22 = map.get(s);
        map.remove(s);
        jTextField5.setText("Running 250,000 Simulations");
        Card[] runout = new Card[5];
        s = (String) jTextField6.getText();
        runout[0] = map.get(s);
        map.remove(s);
        s = (String) jTextField7.getText();
        runout[1] = map.get(s);
        map.remove(s);
        s = (String) jTextField8.getText();
        runout[2] = map.get(s);
        map.remove(s);
        float prob = 0;
        for(int i = 0; i< 250000; i++){
            prob += calcFlop(p11,p12,p21,p22,map,runout);
        }
        prob = prob/250000;
        jTextField5.setText("Probability of Player One Victory = " +prob);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Map<String, Card> map = new HashMap<String, Card>();
        try{
            map = createMap(map);
        }
        catch (IOException e){
            System.exit(1);
        }
        String s = (String) jTextField1.getText();
        Card p11 = map.get(s);
        map.remove(s);
        s = (String) jTextField2.getText();
        Card p12 = map.get(s);
        map.remove(s);
        s = (String) jTextField3.getText();
        Card p21 = map.get(s);
        map.remove(s);
        s = (String) jTextField4.getText();
        Card p22 = map.get(s);
        map.remove(s);
        jTextField5.setText("Running 50,000 Simulations");
        Card[] runout = new Card[5];
        s = (String) jTextField6.getText();
        runout[0] = map.get(s);
        map.remove(s);
        s = (String) jTextField7.getText();
        runout[1] = map.get(s);
        map.remove(s);
        s = (String) jTextField8.getText();
        runout[2] = map.get(s);
        map.remove(s);
        s = (String) jTextField9.getText();
        runout[3] = map.get(s);
        map.remove(s);
        float prob = 0;
        for(int i = 0; i< 50000; i++){
            prob += calcTurn(p11,p12,p21,p22,map,runout);
        }
        prob = prob/50000;
        jTextField5.setText("Probability of Player One Victory = " +prob);
    }//GEN-LAST:event_jButton4ActionPerformed
public static float calcTurn(Card p11, Card p12, Card p21, Card p22, Map<String, Card> map,Card[] runout){
        Random generator = new Random();
        Object[] values = map.keySet().toArray();
        for(int i = 4; i<5;i++){
            runout[i] = map.get((String) values[generator.nextInt(values.length)]);
        }
        float p1 = getStrength(getStrength(p11,p12,runout));
        float p2 = getStrength(getStrength(p21,p22,runout));
        if (p1 < p2){
            return 1;
        }
        else if (p2<p1){
            return 0;
        }
        else{
            if(isFull(getStrength(p11,p12,runout)) > 0){
                if(getStrength(p11,p12,runout)[4].getVal() > getStrength(p21,p22,runout)[4].getVal() || getStrength(p11,p12,runout)[1].getVal() > getStrength(p21,p22,runout)[1].getVal()){
                    return 1;
                }
                else return 0;
            }
            if(isTwoPair(getStrength(p11,p12,runout))>0){
                if(getStrength(p11,p12,runout)[4].getVal() > getStrength(p21,p22,runout)[4].getVal() || getStrength(p11,p12,runout)[1].getVal() > getStrength(p21,p22,runout)[1].getVal()){
                    return 1;
                }
                else return 0;
            }
            return 0.5F;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PokerCalculatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PokerCalculatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PokerCalculatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PokerCalculatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PokerCalculatorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
